// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/03/2022 11:11:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    p06
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module p06_vlg_sample_tst(
	button1,
	button2,
	button3,
	CLK,
	sampler_tx
);
input  button1;
input  button2;
input  button3;
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(button1 or button2 or button3 or CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module p06_vlg_check_tst (
	clock_19,
	cyfry,
	empty,
	full,
	jed,
	pod,
	sampler_rx
);
input  clock_19;
input [3:0] cyfry;
input  empty;
input  full;
input [7:0] jed;
input [1:0] pod;
input sampler_rx;

reg  clock_19_expected;
reg [3:0] cyfry_expected;
reg  empty_expected;
reg  full_expected;
reg [7:0] jed_expected;
reg [1:0] pod_expected;

reg  clock_19_prev;
reg [3:0] cyfry_prev;
reg  empty_prev;
reg  full_prev;
reg [7:0] jed_prev;
reg [1:0] pod_prev;

reg  clock_19_expected_prev;
reg [3:0] cyfry_expected_prev;
reg  empty_expected_prev;
reg  full_expected_prev;
reg [7:0] jed_expected_prev;
reg [1:0] pod_expected_prev;

reg  last_clock_19_exp;
reg [3:0] last_cyfry_exp;
reg  last_empty_exp;
reg  last_full_exp;
reg [7:0] last_jed_exp;
reg [1:0] last_pod_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	clock_19_prev = clock_19;
	cyfry_prev = cyfry;
	empty_prev = empty;
	full_prev = full;
	jed_prev = jed;
	pod_prev = pod;
end

// update expected /o prevs

always @(trigger)
begin
	clock_19_expected_prev = clock_19_expected;
	cyfry_expected_prev = cyfry_expected;
	empty_expected_prev = empty_expected;
	full_expected_prev = full_expected;
	jed_expected_prev = jed_expected;
	pod_expected_prev = pod_expected;
end


// expected cyfry[ 3 ]
initial
begin
	cyfry_expected[3] = 1'bX;
	cyfry_expected[3] = #999000 1'b0;
end 
// expected cyfry[ 2 ]
initial
begin
	cyfry_expected[2] = 1'bX;
	cyfry_expected[2] = #999000 1'b0;
end 
// expected cyfry[ 1 ]
initial
begin
	cyfry_expected[1] = 1'bX;
	cyfry_expected[1] = #999000 1'b0;
end 
// expected cyfry[ 0 ]
initial
begin
	cyfry_expected[0] = 1'bX;
	cyfry_expected[0] = #999000 1'b0;
end 

// expected empty
initial
begin
	empty_expected = 1'bX;
	empty_expected = #999000 1'b0;
end 

// expected full
initial
begin
	full_expected = 1'bX;
	full_expected = #999000 1'b0;
end 
// expected jed[ 7 ]
initial
begin
	jed_expected[7] = 1'bX;
	jed_expected[7] = #999000 1'b0;
end 
// expected jed[ 6 ]
initial
begin
	jed_expected[6] = 1'bX;
	jed_expected[6] = #999000 1'b0;
end 
// expected jed[ 5 ]
initial
begin
	jed_expected[5] = 1'bX;
	jed_expected[5] = #999000 1'b0;
end 
// expected jed[ 4 ]
initial
begin
	jed_expected[4] = 1'bX;
	jed_expected[4] = #999000 1'b0;
end 
// expected jed[ 3 ]
initial
begin
	jed_expected[3] = 1'bX;
	jed_expected[3] = #999000 1'b0;
end 
// expected jed[ 2 ]
initial
begin
	jed_expected[2] = 1'bX;
	jed_expected[2] = #999000 1'b0;
end 
// expected jed[ 1 ]
initial
begin
	jed_expected[1] = 1'bX;
	jed_expected[1] = #999000 1'b0;
end 
// expected jed[ 0 ]
initial
begin
	jed_expected[0] = 1'bX;
	jed_expected[0] = #999000 1'b0;
end 

// expected clock_19
initial
begin
	clock_19_expected = 1'bX;
	clock_19_expected = #999000 1'b0;
end 
// expected pod[ 1 ]
initial
begin
	pod_expected[1] = 1'bX;
	pod_expected[1] = #999000 1'b0;
end 
// expected pod[ 0 ]
initial
begin
	pod_expected[0] = 1'bX;
	pod_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(clock_19_expected or clock_19 or cyfry_expected or cyfry or empty_expected or empty or full_expected or full or jed_expected or jed or pod_expected or pod)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clock_19 = %b | expected cyfry = %b | expected empty = %b | expected full = %b | expected jed = %b | expected pod = %b | ",clock_19_expected_prev,cyfry_expected_prev,empty_expected_prev,full_expected_prev,jed_expected_prev,pod_expected_prev);
	$display("| real clock_19 = %b | real cyfry = %b | real empty = %b | real full = %b | real jed = %b | real pod = %b | ",clock_19_prev,cyfry_prev,empty_prev,full_prev,jed_prev,pod_prev);
`endif
	if (
		( clock_19_expected_prev !== 1'bx ) && ( clock_19_prev !== clock_19_expected_prev )
		&& ((clock_19_expected_prev !== last_clock_19_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clock_19 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clock_19_expected_prev);
		$display ("     Real value = %b", clock_19_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clock_19_exp = clock_19_expected_prev;
	end
	if (
		( cyfry_expected_prev[0] !== 1'bx ) && ( cyfry_prev[0] !== cyfry_expected_prev[0] )
		&& ((cyfry_expected_prev[0] !== last_cyfry_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cyfry[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cyfry_expected_prev);
		$display ("     Real value = %b", cyfry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cyfry_exp[0] = cyfry_expected_prev[0];
	end
	if (
		( cyfry_expected_prev[1] !== 1'bx ) && ( cyfry_prev[1] !== cyfry_expected_prev[1] )
		&& ((cyfry_expected_prev[1] !== last_cyfry_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cyfry[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cyfry_expected_prev);
		$display ("     Real value = %b", cyfry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cyfry_exp[1] = cyfry_expected_prev[1];
	end
	if (
		( cyfry_expected_prev[2] !== 1'bx ) && ( cyfry_prev[2] !== cyfry_expected_prev[2] )
		&& ((cyfry_expected_prev[2] !== last_cyfry_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cyfry[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cyfry_expected_prev);
		$display ("     Real value = %b", cyfry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cyfry_exp[2] = cyfry_expected_prev[2];
	end
	if (
		( cyfry_expected_prev[3] !== 1'bx ) && ( cyfry_prev[3] !== cyfry_expected_prev[3] )
		&& ((cyfry_expected_prev[3] !== last_cyfry_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cyfry[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cyfry_expected_prev);
		$display ("     Real value = %b", cyfry_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cyfry_exp[3] = cyfry_expected_prev[3];
	end
	if (
		( empty_expected_prev !== 1'bx ) && ( empty_prev !== empty_expected_prev )
		&& ((empty_expected_prev !== last_empty_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", empty_expected_prev);
		$display ("     Real value = %b", empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_empty_exp = empty_expected_prev;
	end
	if (
		( full_expected_prev !== 1'bx ) && ( full_prev !== full_expected_prev )
		&& ((full_expected_prev !== last_full_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full_expected_prev);
		$display ("     Real value = %b", full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_full_exp = full_expected_prev;
	end
	if (
		( jed_expected_prev[0] !== 1'bx ) && ( jed_prev[0] !== jed_expected_prev[0] )
		&& ((jed_expected_prev[0] !== last_jed_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jed[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jed_expected_prev);
		$display ("     Real value = %b", jed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jed_exp[0] = jed_expected_prev[0];
	end
	if (
		( jed_expected_prev[1] !== 1'bx ) && ( jed_prev[1] !== jed_expected_prev[1] )
		&& ((jed_expected_prev[1] !== last_jed_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jed[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jed_expected_prev);
		$display ("     Real value = %b", jed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jed_exp[1] = jed_expected_prev[1];
	end
	if (
		( jed_expected_prev[2] !== 1'bx ) && ( jed_prev[2] !== jed_expected_prev[2] )
		&& ((jed_expected_prev[2] !== last_jed_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jed[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jed_expected_prev);
		$display ("     Real value = %b", jed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jed_exp[2] = jed_expected_prev[2];
	end
	if (
		( jed_expected_prev[3] !== 1'bx ) && ( jed_prev[3] !== jed_expected_prev[3] )
		&& ((jed_expected_prev[3] !== last_jed_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jed[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jed_expected_prev);
		$display ("     Real value = %b", jed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jed_exp[3] = jed_expected_prev[3];
	end
	if (
		( jed_expected_prev[4] !== 1'bx ) && ( jed_prev[4] !== jed_expected_prev[4] )
		&& ((jed_expected_prev[4] !== last_jed_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jed[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jed_expected_prev);
		$display ("     Real value = %b", jed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jed_exp[4] = jed_expected_prev[4];
	end
	if (
		( jed_expected_prev[5] !== 1'bx ) && ( jed_prev[5] !== jed_expected_prev[5] )
		&& ((jed_expected_prev[5] !== last_jed_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jed[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jed_expected_prev);
		$display ("     Real value = %b", jed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jed_exp[5] = jed_expected_prev[5];
	end
	if (
		( jed_expected_prev[6] !== 1'bx ) && ( jed_prev[6] !== jed_expected_prev[6] )
		&& ((jed_expected_prev[6] !== last_jed_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jed[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jed_expected_prev);
		$display ("     Real value = %b", jed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jed_exp[6] = jed_expected_prev[6];
	end
	if (
		( jed_expected_prev[7] !== 1'bx ) && ( jed_prev[7] !== jed_expected_prev[7] )
		&& ((jed_expected_prev[7] !== last_jed_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port jed[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", jed_expected_prev);
		$display ("     Real value = %b", jed_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_jed_exp[7] = jed_expected_prev[7];
	end
	if (
		( pod_expected_prev[0] !== 1'bx ) && ( pod_prev[0] !== pod_expected_prev[0] )
		&& ((pod_expected_prev[0] !== last_pod_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pod[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pod_expected_prev);
		$display ("     Real value = %b", pod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pod_exp[0] = pod_expected_prev[0];
	end
	if (
		( pod_expected_prev[1] !== 1'bx ) && ( pod_prev[1] !== pod_expected_prev[1] )
		&& ((pod_expected_prev[1] !== last_pod_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pod[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pod_expected_prev);
		$display ("     Real value = %b", pod_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_pod_exp[1] = pod_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module p06_vlg_vec_tst();
// constants                                           
// general purpose registers
reg button1;
reg button2;
reg button3;
reg CLK;
// wires                                               
wire clock_19;
wire [3:0] cyfry;
wire empty;
wire full;
wire [7:0] jed;
wire [1:0] pod;

wire sampler;                             

// assign statements (if any)                          
p06 i1 (
// port map - connection between master ports and signals/registers   
	.button1(button1),
	.button2(button2),
	.button3(button3),
	.CLK(CLK),
	.clock_19(clock_19),
	.cyfry(cyfry),
	.empty(empty),
	.full(full),
	.jed(jed),
	.pod(pod)
);

// button1
initial
begin
	repeat(4)
	begin
		button1 = 1'b0;
		button1 = #100000 1'b1;
		# 100000;
	end
	button1 = 1'b0;
	button1 = #100000 1'b1;
end 

// button2
initial
begin
	button2 = 1'b1;
end 

// button3
initial
begin
	button3 = 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

p06_vlg_sample_tst tb_sample (
	.button1(button1),
	.button2(button2),
	.button3(button3),
	.CLK(CLK),
	.sampler_tx(sampler)
);

p06_vlg_check_tst tb_out(
	.clock_19(clock_19),
	.cyfry(cyfry),
	.empty(empty),
	.full(full),
	.jed(jed),
	.pod(pod),
	.sampler_rx(sampler)
);
endmodule

