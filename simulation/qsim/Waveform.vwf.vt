// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/03/2022 11:52:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    p06
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module p06_vlg_sample_tst(
	ADR,
	button1,
	button2,
	button3,
	CLK,
	w0,
	w1,
	w2,
	w3,
	sampler_tx
);
input [1:0] ADR;
input  button1;
input  button2;
input  button3;
input  CLK;
input [7:0] w0;
input [7:0] w1;
input [7:0] w2;
input [7:0] w3;
output sampler_tx;

reg sample;
time current_time;
always @(ADR or button1 or button2 or button3 or CLK or w0 or w1 or w2 or w3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module p06_vlg_check_tst (
	cyfry,
	empty,
	full,
	jed,
	wy,
	sampler_rx
);
input [3:0] cyfry;
input  empty;
input  full;
input [7:0] jed;
input [7:0] wy;
input sampler_rx;

reg [3:0] cyfry_expected;
reg  empty_expected;
reg  full_expected;
reg [7:0] jed_expected;
reg [7:0] wy_expected;

reg [3:0] cyfry_prev;
reg  empty_prev;
reg  full_prev;
reg [7:0] jed_prev;
reg [7:0] wy_prev;

reg [7:0] wy_expected_prev;

reg [7:0] last_wy_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	cyfry_prev = cyfry;
	empty_prev = empty;
	full_prev = full;
	jed_prev = jed;
	wy_prev = wy;
end

// update expected /o prevs

always @(trigger)
begin
	wy_expected_prev = wy_expected;
end


// expected wy[ 7 ]
initial
begin
	wy_expected[7] = 1'bX;
end 
// expected wy[ 6 ]
initial
begin
	wy_expected[6] = 1'bX;
end 
// expected wy[ 5 ]
initial
begin
	wy_expected[5] = 1'bX;
end 
// expected wy[ 4 ]
initial
begin
	wy_expected[4] = 1'bX;
end 
// expected wy[ 3 ]
initial
begin
	wy_expected[3] = 1'bX;
end 
// expected wy[ 2 ]
initial
begin
	wy_expected[2] = 1'bX;
end 
// expected wy[ 1 ]
initial
begin
	wy_expected[1] = 1'bX;
end 
// expected wy[ 0 ]
initial
begin
	wy_expected[0] = 1'bX;
end 
// generate trigger
always @(cyfry_expected or cyfry or empty_expected or empty or full_expected or full or jed_expected or jed or wy_expected or wy)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cyfry = %b | expected empty = %b | expected full = %b | expected jed = %b | expected wy = %b | ",cyfry_expected_prev,empty_expected_prev,full_expected_prev,jed_expected_prev,wy_expected_prev);
	$display("| real cyfry = %b | real empty = %b | real full = %b | real jed = %b | real wy = %b | ",cyfry_prev,empty_prev,full_prev,jed_prev,wy_prev);
`endif
	if (
		( wy_expected_prev[0] !== 1'bx ) && ( wy_prev[0] !== wy_expected_prev[0] )
		&& ((wy_expected_prev[0] !== last_wy_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wy[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wy_expected_prev);
		$display ("     Real value = %b", wy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_wy_exp[0] = wy_expected_prev[0];
	end
	if (
		( wy_expected_prev[1] !== 1'bx ) && ( wy_prev[1] !== wy_expected_prev[1] )
		&& ((wy_expected_prev[1] !== last_wy_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wy[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wy_expected_prev);
		$display ("     Real value = %b", wy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_wy_exp[1] = wy_expected_prev[1];
	end
	if (
		( wy_expected_prev[2] !== 1'bx ) && ( wy_prev[2] !== wy_expected_prev[2] )
		&& ((wy_expected_prev[2] !== last_wy_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wy[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wy_expected_prev);
		$display ("     Real value = %b", wy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_wy_exp[2] = wy_expected_prev[2];
	end
	if (
		( wy_expected_prev[3] !== 1'bx ) && ( wy_prev[3] !== wy_expected_prev[3] )
		&& ((wy_expected_prev[3] !== last_wy_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wy[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wy_expected_prev);
		$display ("     Real value = %b", wy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_wy_exp[3] = wy_expected_prev[3];
	end
	if (
		( wy_expected_prev[4] !== 1'bx ) && ( wy_prev[4] !== wy_expected_prev[4] )
		&& ((wy_expected_prev[4] !== last_wy_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wy[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wy_expected_prev);
		$display ("     Real value = %b", wy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_wy_exp[4] = wy_expected_prev[4];
	end
	if (
		( wy_expected_prev[5] !== 1'bx ) && ( wy_prev[5] !== wy_expected_prev[5] )
		&& ((wy_expected_prev[5] !== last_wy_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wy[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wy_expected_prev);
		$display ("     Real value = %b", wy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_wy_exp[5] = wy_expected_prev[5];
	end
	if (
		( wy_expected_prev[6] !== 1'bx ) && ( wy_prev[6] !== wy_expected_prev[6] )
		&& ((wy_expected_prev[6] !== last_wy_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wy[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wy_expected_prev);
		$display ("     Real value = %b", wy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_wy_exp[6] = wy_expected_prev[6];
	end
	if (
		( wy_expected_prev[7] !== 1'bx ) && ( wy_prev[7] !== wy_expected_prev[7] )
		&& ((wy_expected_prev[7] !== last_wy_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wy[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wy_expected_prev);
		$display ("     Real value = %b", wy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_wy_exp[7] = wy_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module p06_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] ADR;
reg button1;
reg button2;
reg button3;
reg CLK;
reg [7:0] w0;
reg [7:0] w1;
reg [7:0] w2;
reg [7:0] w3;
// wires                                               
wire [3:0] cyfry;
wire empty;
wire full;
wire [7:0] jed;
wire [7:0] wy;

wire sampler;                             

// assign statements (if any)                          
p06 i1 (
// port map - connection between master ports and signals/registers   
	.ADR(ADR),
	.button1(button1),
	.button2(button2),
	.button3(button3),
	.CLK(CLK),
	.cyfry(cyfry),
	.empty(empty),
	.full(full),
	.jed(jed),
	.w0(w0),
	.w1(w1),
	.w2(w2),
	.w3(w3),
	.wy(wy)
);
// ADR[ 1 ]
initial
begin
	ADR[1] = 1'b0;
	ADR[1] = #400000 1'b1;
	ADR[1] = #400000 1'b0;
end 
// ADR[ 0 ]
initial
begin
	repeat(2)
	begin
		ADR[0] = 1'b0;
		ADR[0] = #200000 1'b1;
		# 200000;
	end
	ADR[0] = 1'b0;
end 
// w0[ 7 ]
initial
begin
	w0[7] = 1'b0;
end 
// w0[ 6 ]
initial
begin
	w0[6] = 1'b0;
end 
// w0[ 5 ]
initial
begin
	w0[5] = 1'b0;
end 
// w0[ 4 ]
initial
begin
	w0[4] = 1'b0;
end 
// w0[ 3 ]
initial
begin
	w0[3] = 1'b0;
end 
// w0[ 2 ]
initial
begin
	w0[2] = 1'b0;
end 
// w0[ 1 ]
initial
begin
	w0[1] = 1'b0;
end 
// w0[ 0 ]
initial
begin
	w0[0] = 1'b1;
end 
// w1[ 7 ]
initial
begin
	w1[7] = 1'b0;
end 
// w1[ 6 ]
initial
begin
	w1[6] = 1'b0;
end 
// w1[ 5 ]
initial
begin
	w1[5] = 1'b0;
end 
// w1[ 4 ]
initial
begin
	w1[4] = 1'b0;
end 
// w1[ 3 ]
initial
begin
	w1[3] = 1'b0;
end 
// w1[ 2 ]
initial
begin
	w1[2] = 1'b0;
end 
// w1[ 1 ]
initial
begin
	w1[1] = 1'b1;
end 
// w1[ 0 ]
initial
begin
	w1[0] = 1'b0;
end 
// w2[ 7 ]
initial
begin
	w2[7] = 1'b0;
end 
// w2[ 6 ]
initial
begin
	w2[6] = 1'b0;
end 
// w2[ 5 ]
initial
begin
	w2[5] = 1'b0;
end 
// w2[ 4 ]
initial
begin
	w2[4] = 1'b0;
end 
// w2[ 3 ]
initial
begin
	w2[3] = 1'b0;
end 
// w2[ 2 ]
initial
begin
	w2[2] = 1'b1;
end 
// w2[ 1 ]
initial
begin
	w2[1] = 1'b0;
end 
// w2[ 0 ]
initial
begin
	w2[0] = 1'b0;
end 
// w3[ 7 ]
initial
begin
	w3[7] = 1'b0;
end 
// w3[ 6 ]
initial
begin
	w3[6] = 1'b0;
end 
// w3[ 5 ]
initial
begin
	w3[5] = 1'b0;
end 
// w3[ 4 ]
initial
begin
	w3[4] = 1'b0;
end 
// w3[ 3 ]
initial
begin
	w3[3] = 1'b1;
end 
// w3[ 2 ]
initial
begin
	w3[2] = 1'b0;
end 
// w3[ 1 ]
initial
begin
	w3[1] = 1'b0;
end 
// w3[ 0 ]
initial
begin
	w3[0] = 1'b0;
end 

p06_vlg_sample_tst tb_sample (
	.ADR(ADR),
	.button1(button1),
	.button2(button2),
	.button3(button3),
	.CLK(CLK),
	.w0(w0),
	.w1(w1),
	.w2(w2),
	.w3(w3),
	.sampler_tx(sampler)
);

p06_vlg_check_tst tb_out(
	.cyfry(cyfry),
	.empty(empty),
	.full(full),
	.jed(jed),
	.wy(wy),
	.sampler_rx(sampler)
);
endmodule

